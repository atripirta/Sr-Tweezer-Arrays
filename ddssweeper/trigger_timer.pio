.program trigger

.side_set 1 opt

start:
    pull block          side 0
    mov x, osr
    jmp x-- trigger

; if the input is zero, just send an update without waiting
update:
    jmp start           side 1 [7]            

trigger:
    wait 1 pin 0
    out pins, 4         side 1 [3]
    out pins, 4         side 0
    push                
 



.program timer

.side_set 1

start:
    pull block      side 0      ; pull the instruction from FIFO
    mov x, osr      side 0      ; move from osr to scratch register
    jmp !x hwstart  side 0      ; if instuciton is 0 that means hwstart

    nop             side 1 [5]  ; if not hwstart, hit the trigger pin
loop:
    jmp x-- loop    side 0      ; count down to next trigger

.wrap

hwstart:
    wait 1 pin 0   side 0      ; wait for the trigger pin
    jmp start       side 0



% c-sdk {

    static inline void trigger_program_init(PIO pio, uint sm, uint offset, 
        uint trigger_pin,
        uint p_pin, 
        uint update_pin
    ) {
        
        // profile pins
        pio_gpio_init(pio, p_pin + 0);
        pio_gpio_init(pio, p_pin + 1);
        pio_gpio_init(pio, p_pin + 2);
        pio_gpio_init(pio, p_pin + 3);
        // IO_UPDATE to AD9959
        pio_gpio_init(pio, update_pin);
        // External Trigger Pin
        pio_gpio_init(pio, trigger_pin); 

        pio_sm_set_pindirs_with_mask(pio, sm,
            (0xf << p_pin) | (1u << update_pin) | (0u << trigger_pin),    
            (0xf << p_pin) | (1u << update_pin) | (1u << trigger_pin)    
        );

        pio_sm_config c = trigger_program_get_default_config(offset);

        sm_config_set_sideset_pins(&c, update_pin);
        sm_config_set_out_pins(&c, p_pin, 4);
        sm_config_set_in_pins(&c, trigger_pin);

        sm_config_set_out_shift(&c, true, false, 1);
        sm_config_set_in_shift(&c, true, true, 1);

        sm_config_set_clkdiv(&c, 1.f);
 
        hw_set_bits(&pio->input_sync_bypass, 1u << trigger_pin);

        pio_sm_init(pio, sm, offset, &c);

        pio_sm_set_enabled(pio, sm, true);
    }

    static inline void timer_program_init(PIO pio, uint sm, uint offset,
        uint trigger_pin
    ) {
        pio_sm_config c = timer_program_get_default_config(offset);
    

        pio_gpio_init(pio, trigger_pin);
        pio_sm_set_pindirs_with_mask(pio, sm, 
            (1u << trigger_pin),
            (1u << trigger_pin)
        );
        sm_config_set_sideset_pins(&c, trigger_pin);
        sm_config_set_in_pins(&c, trigger_pin);

        sm_config_set_out_shift(&c, true, false, 1);
        sm_config_set_in_shift(&c, true, true, 1);

        sm_config_set_clkdiv(&c, 1.f);

        pio_sm_init(pio, sm, offset, &c);
        pio_sm_set_enabled(pio, sm, true);


    }

%}